// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(WebPortalDbContext))]
    partial class WebPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<Guid>("ArticlesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid");

                    b.HasKey("ArticlesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("Domain.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountAppraisers")
                        .HasColumnType("integer");

                    b.Property<int>("CountDislikes")
                        .HasColumnType("integer");

                    b.Property<int>("CountLikes")
                        .HasColumnType("integer");

                    b.Property<int>("CountViews")
                        .HasColumnType("integer");

                    b.Property<int>("CountViewsPerDay")
                        .HasColumnType("integer");

                    b.Property<int>("CountViewsPerMonth")
                        .HasColumnType("integer");

                    b.Property<int>("CountViewsPerWeek")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("KeyWords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("489d1832-f8d2-4592-8e2a-368e80618f01"),
                            AuthorId = new Guid("afd97b6f-0511-4c46-a357-fb62c9582aa1"),
                            CategoryId = new Guid("a58b52f5-d8dd-4530-a9bc-1c75a3e6a7f3"),
                            CountAppraisers = 0,
                            CountDislikes = 0,
                            CountLikes = 0,
                            CountViews = 0,
                            CountViewsPerDay = 0,
                            CountViewsPerMonth = 0,
                            CountViewsPerWeek = 0,
                            CreationDate = new DateTime(2023, 12, 21, 0, 37, 49, 190, DateTimeKind.Local).AddTicks(8156),
                            KeyWords = "example event",
                            Name = "First event",
                            Rating = 0.0,
                            Status = 0,
                            Text = "This is example event"
                        });
                });

            modelBuilder.Entity("Domain.ArticleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("article_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a58b52f5-d8dd-4530-a9bc-1c75a3e6a7f3"),
                            Name = "Sport category"
                        });
                });

            modelBuilder.Entity("Domain.Commentary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountDislikes")
                        .HasColumnType("integer");

                    b.Property<int>("CountLikes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentId");

                    b.ToTable("commentaries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("482e68bf-1035-42fa-8b30-4df0cc73c56c"),
                            ArticleId = new Guid("489d1832-f8d2-4592-8e2a-368e80618f01"),
                            AuthorId = new Guid("afd97b6f-0511-4c46-a357-fb62c9582aa1"),
                            CountDislikes = 1,
                            CountLikes = 11,
                            CreationDate = new DateTime(2023, 12, 21, 0, 37, 49, 190, DateTimeKind.Local).AddTicks(8166),
                            Text = "Good event!"
                        });
                });

            modelBuilder.Entity("Domain.Complaint.ArticleComplaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArticleId")
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("complaints_article", (string)null);
                });

            modelBuilder.Entity("Domain.Complaint.UserComplaint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("complaints_user", (string)null);
                });

            modelBuilder.Entity("Domain.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FoundWords")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("recommendations", (string)null);
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("49bac43a-4522-4031-870d-302ed4441f8a"),
                            Name = "#sport"
                        });
                });

            modelBuilder.Entity("Domain.User.UserAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email");

                    b.ToTable("user_auth", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.HasBaseType("Domain.User.UserAuth");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("TagId")
                        .HasColumnType("uuid");

                    b.HasIndex("TagId");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("afd97b6f-0511-4c46-a357-fb62c9582aa1"),
                            Email = "test@gmail.com",
                            Password = "12345",
                            Role = "user",
                            Description = "I`m TesT!",
                            Name = "TesT",
                            NickName = "@testU5er",
                            RegistrationDate = new DateTime(2023, 12, 21, 0, 37, 49, 190, DateTimeKind.Local).AddTicks(8107)
                        });
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("Domain.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Article", b =>
                {
                    b.HasOne("Domain.User.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.ArticleCategory", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Commentary", b =>
                {
                    b.HasOne("Domain.Article", "Article")
                        .WithMany("Commentaries")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", "Author")
                        .WithMany("Commentaries")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Commentary", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentId");

                    b.Navigation("Article");

                    b.Navigation("Author");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Domain.Complaint.ArticleComplaint", b =>
                {
                    b.HasOne("Domain.Article", "Article")
                        .WithMany("Complaints")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Domain.Complaint.UserComplaint", b =>
                {
                    b.HasOne("Domain.User.User", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Recommendation", b =>
                {
                    b.HasOne("Domain.User.User", "User")
                        .WithOne("Recommendation")
                        .HasForeignKey("Domain.Recommendation", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.HasOne("Domain.User.UserAuth", null)
                        .WithOne()
                        .HasForeignKey("Domain.User.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Tag", null)
                        .WithMany("Finders")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("Domain.Article", b =>
                {
                    b.Navigation("Commentaries");

                    b.Navigation("Complaints");
                });

            modelBuilder.Entity("Domain.ArticleCategory", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Domain.Commentary", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.Navigation("Finders");
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Commentaries");

                    b.Navigation("Complaints");

                    b.Navigation("Recommendation");
                });
#pragma warning restore 612, 618
        }
    }
}
